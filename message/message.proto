// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "example/dist_sched/message";


package message;


service RatioConsensus {
  rpc SayHello (HelloRequest) returns (HelloReply) {}
  rpc SendConData (stream ConDataRequest) returns (EmptyReply) {}
  rpc Ping (EmptyRequest) returns (EmptyReply) {}
}

service SchedReg {
  rpc Reg(RegRequest) returns (RegReply) {}
  rpc GetNeighbours(NeighboursRequest) returns (NeighboursReply) {}
  rpc FinSetup(SetupRequest) returns (SetupReply) {}
  rpc FinConsensus(FinRequest) returns (EmptyReply) {}
}

service SchedStart {
  rpc StartConsensus(StartRequest) returns (EmptyReply) {}
  rpc StartPlace(EmptyRequest) returns (EmptyReply) {}
}

service JobPlacement {
  rpc GetJob(JobRequest) returns (JobReply) {}
}

message JobRequest {
  int32 trial = 1;
  double size = 2; // requested size
  int32 me = 3;
  string node = 4;
}

message JobReply {
  double size = 1; // actual job size
}


message FinRequest {
  int32 me = 1;
  int32 trial = 2; 
}


message StartRequest {
  int32 trial = 1;
  double l = 2;
  double u = 3;
  double pi = 4;
}


message RegRequest {
  string name = 1;
  string ip = 2;
}

message RegReply {
  int32 you = 1;
}

message NeighboursRequest {
  int32 me = 1;
}

message NeighboursReply {
  repeated string neigh = 1;
  uint64 inNeighbours = 2;
}

message SetupRequest {
  int32 me = 1;
  uint64 inNeighbours = 2;
}

message SetupReply {
  bool finished = 1;
}


message EmptyRequest {
}

message EmptyReply {
}

message ConDataRequest {
  uint64 k = 1;
  int32 me = 2;
  ConData data = 3;
}


message ConDataReply {
  uint64 k = 1;
  string name = 2;
  ConData data = 3;
}

message ConData {
  double p = 3; // p_lj
  double y = 4; // y_j
  double z = 5; // z_j
  double mm = 6; // M_j
  double m = 7; // m_j
  bool flag = 8;
}


message HelloRequest {
  int32 me = 1;
}

// The response message containing the greetings
message HelloReply {
  int32 me = 1;
}
